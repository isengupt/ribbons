{"version":3,"sources":["Scene.js","shaders/vertex.js","shaders/fragment.js","App.js","index.js"],"names":["Ribbon","material","this","geometry","THREE","m","color","Math","random","side","wireframe","width","mesh","dynamic","speed","travel","position","time","target","pp","attributes","array","j","pop","nextPos","lerpVectors","distanceTo","rot","sin","cos","z","unshift","x","y","Float32Array","needsUpdate","computeVertexNormals","computeFaceNormals","Scene","props","setupResize","window","addEventListener","resize","container","offsetWidth","height","offsetHeight","renderer","setSize","camera","aspect","console","log","imageAspect","updateProjectionMatrix","start","bind","stop","animate","scene","antialias","mount","clientWidth","clientHeight","setClearColor","physicallyCorrectLights","outputEncoding","mouse","raycaster","document","getElementById","appendChild","domElement","set","controls","OrbitControls","addObjects","lighting","mouseEvents","that","touchme","event","clientX","innerWidth","clientY","innerHeight","setFromCamera","intersects","intersectObjects","point","directionalLight","add","light","extensions","derivatives","uniforms","type","value","resolution","uvRate1","vertexShader","fragmentShader","ribbons","i","ribbon","push","removeChild","frameId","requestAnimationFrame","cancelAnimationFrame","renderScene","forEach","update","render","id","ref","Component","App","className","href","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.2bbbdd32.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\n\nimport { fragment } from \"./shaders/fragment\";\nimport { vertex } from \"./shaders/vertex\";\n\nclass Ribbon {\n  constructor(material) {\n    this.geometry = new THREE.PlaneBufferGeometry(1, 1, 1, 300);\n    this.m = material;\n    this.m = new THREE.MeshPhysicalMaterial({\n      color: 0xff0000*Math.random(),\n      side: THREE.DoubleSide,\n    });\n    \n    material.wireframe = true;\n\n    this.width = 1;\n\n    this.mesh = new THREE.Mesh(this.geometry, this.m);\n    this.mesh.dynamic = true;\n    this.speed = 1;\n    this.travel = 0;\n\n    this.position = new THREE.Vector3(0, 0, 0);\n  }\n\n  update(time, target) {\n    time *= 0.5;\n    // console.log(this);\n    this.pp = [...this.geometry.attributes.position.array];\n\n    for (let j = 0; j < 6; j++) {\n      this.pp.pop();\n    }\n\n   \n\n    //this.position.x = Math.sin(time * 5.5) * (4 + Math.sin(time * 7));\n    //this.position.y = Math.cos(time * 3) * (3 + Math.sin(time * 5));\n\n    this.nextPos = new THREE.Vector3().lerpVectors(this.position,target, 0.1)\n\n    this.travel += this.nextPos.distanceTo(this.position)\n\n    this.position = this.nextPos;\n\n    let rot = [\n      (Math.sin(this.travel/5) * this.width) / 2,\n      (Math.cos(this.travel/5) * this.width) / 2,\n    ];\n\n    this.position.z = 3 * Math.sin(this.travel/5)\n    this.pp.unshift(\n      this.position.x + rot[0],\n      this.position.y + time * 0,\n      this.position.z + rot[1]\n    );\n    this.pp.unshift(\n      this.position.x - rot[0],\n      this.position.y + time * 0,\n      this.position.z - rot[1]\n    );\n\n    this.geometry.attributes.position.array = new Float32Array(this.pp);\n\n    this.geometry.attributes.position.needsUpdate = true;\n\n    this.geometry.computeVertexNormals()\n    this.geometry.computeFaceNormals()\n\n    this.m.color = new THREE.Color(`hsl(${200 + 100*Math.sin(time*4)},100%, 50%)`);\n  }\n}\nclass Scene extends Component {\n  constructor(props) {\n    super(props);\n\n    this.start = this.start.bind(this);\n    this.stop = this.stop.bind(this);\n    this.animate = this.animate.bind(this);\n  }\n  componentDidMount() {\n    this.scene = new THREE.Scene();\n    this.renderer = new THREE.WebGLRenderer({\n      antialias: true,\n    });\n\n    this.width = this.mount.clientWidth;\n    this.height = this.mount.clientHeight;\n    this.renderer.setClearColor(0xeeeeee, 1);\n    this.renderer.setSize(this.width, this.height);\n    this.renderer.physicallyCorrectLights = true;\n    this.renderer.outputEncoding = THREE.sRGBEncoding;\n    this.mouse = new THREE.Vector2();\n    this.target = new THREE.Vector3(0,0,0);\n    this.raycaster = new THREE.Raycaster();\n\n    this.container = document.getElementById(\"scene\");\n\n    this.mount.appendChild(this.renderer.domElement);\n\n    this.camera = new THREE.PerspectiveCamera(\n      75,\n      this.width / this.height,\n      0.001,\n      1000\n    );\n\n    this.camera.position.set(0, 0, 15);\n\n    this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n\n    this.time = 0;\n    this.setupResize();\n    this.addObjects();\n    this.animate();\n    this.lighting();\n    this.mouseEvents();\n    this.resize();\n    \n  }\n\n  mouseEvents() {\n    var that = this;\n\n    this.touchme = new THREE.Mesh(\n      new THREE.PlaneGeometry(40,40,20,20),\n      new THREE.MeshBasicMaterial({color: 0x000000, wireframe: true})\n    )\n\n    //this.scene.add(this.touchme)\n\n    \n    function onMouseMove( event ) {\n\n      // calculate mouse position in normalized device coordinates\n      // (-1 to +1) for both components\n    \n      that.mouse.x = ( event.clientX / window.innerWidth ) * 2 - 1;\n      that.mouse.y = - ( event.clientY / window.innerHeight ) * 2 + 1;\n\n      that.raycaster.setFromCamera( that.mouse, that.camera );\n\n      // calculate objects intersecting the picking ray\n      const intersects = that.raycaster.intersectObjects( [that.touchme] );\n\n      that.target = intersects[0].point;\n    \n    }\n\n    this.container.addEventListener( 'mousemove', onMouseMove, false );\n    \n  }\n\n  lighting() {\n    var directionalLight = new THREE.DirectionalLight(0xffffff, 1);\n\n    directionalLight.position.set(1, 1, 1);\n    this.scene.add(directionalLight);\n\n    var directionalLight = new THREE.DirectionalLight(0xffffff, 0.5);\n\n    directionalLight.position.set(-1, -1, -1);\n    this.scene.add(directionalLight);\n\n    var light = new THREE.AmbientLight(0x404040);\n    this.scene.add(light);\n  }\n\n  addObjects() {\n    let that = this;\n    this.material = new THREE.ShaderMaterial({\n      extensions: {\n        derivatives: \"#extension GL_OES_standard_derivatives : enable\",\n      },\n      side: THREE.DoubleSide,\n      uniforms: {\n        time: { type: \"f\", value: 0 },\n\n        resolution: { type: \"v4\", value: new THREE.Vector4() },\n        uvRate1: {\n          value: new THREE.Vector2(1, 1),\n        },\n      },\n      vertexShader: vertex,\n      fragmentShader: fragment,\n    });\n\n    this.ribbons = [];\n    for (let i = 0; i < 1; i++) {\n      let ribbon = new Ribbon(this.material);\n      this.scene.add(ribbon.mesh);\n\n      this.ribbons.push(ribbon);\n    }\n\n    //this.geometry = new THREE.PlaneGeometry(1, 1, 1, 1);\n\n    //this.plane = new THREE.Mesh(this.geometry, this.material);\n\n    //this.scene.add(this.plane);\n  }\n\n  setupResize = () => {\n    window.addEventListener(\"resize\", this.resize);\n  };\n\n  resize = () => {\n    this.width = this.container.offsetWidth;\n    this.height = this.container.offsetHeight;\n    this.renderer.setSize(this.width, this.height);\n    this.camera.aspect = this.width / this.height;\n    console.log(\"resize\");\n\n    this.imageAspect = 853 / 1280;\n    /* \n    let a1;\n    let a2;\n\n    if (this.height / this.width > this.imageAspect) {\n      a1 = (this.width / this.height) * this.imageAspect;\n      a2 = 1;\n    } else {\n      a1 = 1;\n      a2 = this.height / this.width / this.imageAspect;\n    }\n\n    this.material.uniforms.resolution.value.x = this.width;\n    this.material.uniforms.resolution.value.y = this.height;\n    this.material.uniforms.resolution.value.z = a1;\n    this.material.uniforms.resolution.value.w = a2;\n\n    const dist = this.camera.position.z;\n    const height = 1;\n    this.camera.fov = 2* (180/Math.PI) * Math.atan(height/(2*dist));\n\n    if (this.width / this.height > 1) {\n      this.plane.scale.x = this.camera.aspect;\n    } else {\n      this.plane.scale.y = 1 / this.camera.aspect;\n    }  */\n\n    this.camera.updateProjectionMatrix();\n    console.log(this.camera);\n  };\n\n  componentWillUnmount() {\n    this.stop();\n    this.mount.removeChild(this.renderer.domElement);\n  }\n\n  start() {\n    if (!this.frameId) {\n      this.frameId = requestAnimationFrame(this.animate);\n    }\n  }\n\n  stop() {\n    cancelAnimationFrame(this.frameId);\n  }\n\n  animate() {\n    this.time += 0.05;\n    this.material.uniforms.time.value = this.time;\n\n    this.frameId = requestAnimationFrame(this.animate);\n\n    this.renderScene();\n\n    this.ribbons.forEach((ribbon) => {\n      ribbon.update(this.time, this.target);\n    });\n  }\n\n  renderScene() {\n    this.renderer.render(this.scene, this.camera);\n  }\n\n  render() {\n    return (\n      <div\n        id=\"scene\"\n        ref={(mount) => {\n          this.mount = mount;\n        }}\n      />\n    );\n  }\n}\n\nexport default Scene;\n","export var vertex = `\nattribute vec3 color;\nvarying vec2 vUv;\n\n  void main() {\n    vUv = uv;\n\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position,1.0);\n}\n`;\n","export var fragment = `\n\nuniform float time;\nuniform float progress;\nuniform sampler2D texture1;\nuniform vec4 resolution;\n\nvarying vec2 vUv;\nvarying vec3 vPosition;\nfloat PI = 3.141592653589793238;\nvoid main(){\n  gl_FragColor = vec4(vUv,0.0,1.);\n  gl_FragColor = vec4(0.,0.,0.,1.);\n\n}\n`;\n","import './App.css';\nimport Scene from './Scene'\n\nfunction App() {\n  return (\n    <>\n    <div className=\"frame\">\n    <h1 className=\"frame__title\">Ribbons</h1>\n    <div className=\"frame__links\"></div>\n    <div className=\"frame__nav\">\n      <a\n        className=\"frame__link\"\n        href=\"https://isengupt.github.io/cubic-move-react/\"\n      >\n        Previous\n      </a>\n      <a className=\"frame__link\" href=\"#\">\n        Resume\n      </a>\n      <a\n        className=\"frame__link\"\n        href=\"https://github.com/isengupt/ribbons/\"\n      >\n        GitHub\n      </a>\n    </div>\n  </div>\n     <Scene/>\n     </>\n\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}