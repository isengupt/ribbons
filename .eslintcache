[{"/Users/ishansengupta/Desktop/front-end/ribbons/src/index.js":"1","/Users/ishansengupta/Desktop/front-end/ribbons/src/App.js":"2","/Users/ishansengupta/Desktop/front-end/ribbons/src/Scene.js":"3","/Users/ishansengupta/Desktop/front-end/ribbons/src/shaders/fragment.js":"4","/Users/ishansengupta/Desktop/front-end/ribbons/src/shaders/vertex.js":"5"},{"size":200,"mtime":1608832311341,"results":"6","hashOfConfig":"7"},{"size":637,"mtime":1610299088797,"results":"8","hashOfConfig":"7"},{"size":7315,"mtime":1608950978439,"results":"9","hashOfConfig":"7"},{"size":288,"mtime":1608947749401,"results":"10","hashOfConfig":"7"},{"size":172,"mtime":1608945279232,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"16cqcht",{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"14"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20","usedDeprecatedRules":"14"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/ishansengupta/Desktop/front-end/ribbons/src/index.js",[],["25","26"],"/Users/ishansengupta/Desktop/front-end/ribbons/src/App.js",["27"],"import './App.css';\nimport Scene from './Scene'\n\nfunction App() {\n  return (\n    <>\n    <div className=\"frame\">\n    <h1 className=\"frame__title\">Ribbons</h1>\n    <div className=\"frame__links\"></div>\n    <div className=\"frame__nav\">\n      <a\n        className=\"frame__link\"\n        href=\"https://isengupt.github.io/cubic-move-react/\"\n      >\n        Previous\n      </a>\n      <a className=\"frame__link\" href=\"#\">\n        Resume\n      </a>\n      <a\n        className=\"frame__link\"\n        href=\"https://github.com/isengupt/ribbons/\"\n      >\n        GitHub\n      </a>\n    </div>\n  </div>\n     <Scene/>\n     </>\n\n  );\n}\n\nexport default App;\n","/Users/ishansengupta/Desktop/front-end/ribbons/src/Scene.js",["28","29"],"import React, { Component } from \"react\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\n\nimport { fragment } from \"./shaders/fragment\";\nimport { vertex } from \"./shaders/vertex\";\n\nclass Ribbon {\n  constructor(material) {\n    this.geometry = new THREE.PlaneBufferGeometry(1, 1, 1, 300);\n    this.m = material;\n    this.m = new THREE.MeshPhysicalMaterial({\n      color: 0xff0000*Math.random(),\n      side: THREE.DoubleSide,\n    });\n    \n    material.wireframe = true;\n\n    this.width = 1;\n\n    this.mesh = new THREE.Mesh(this.geometry, this.m);\n    this.mesh.dynamic = true;\n    this.speed = 1;\n    this.travel = 0;\n\n    this.position = new THREE.Vector3(0, 0, 0);\n  }\n\n  update(time, target) {\n    time *= 0.5;\n    // console.log(this);\n    this.pp = [...this.geometry.attributes.position.array];\n\n    for (let j = 0; j < 6; j++) {\n      this.pp.pop();\n    }\n\n   \n\n    //this.position.x = Math.sin(time * 5.5) * (4 + Math.sin(time * 7));\n    //this.position.y = Math.cos(time * 3) * (3 + Math.sin(time * 5));\n\n    this.nextPos = new THREE.Vector3().lerpVectors(this.position,target, 0.1)\n\n    this.travel += this.nextPos.distanceTo(this.position)\n\n    this.position = this.nextPos;\n\n    let rot = [\n      (Math.sin(this.travel/5) * this.width) / 2,\n      (Math.cos(this.travel/5) * this.width) / 2,\n    ];\n\n    this.position.z = 3 * Math.sin(this.travel/5)\n    this.pp.unshift(\n      this.position.x + rot[0],\n      this.position.y + time * 0,\n      this.position.z + rot[1]\n    );\n    this.pp.unshift(\n      this.position.x - rot[0],\n      this.position.y + time * 0,\n      this.position.z - rot[1]\n    );\n\n    this.geometry.attributes.position.array = new Float32Array(this.pp);\n\n    this.geometry.attributes.position.needsUpdate = true;\n\n    this.geometry.computeVertexNormals()\n    this.geometry.computeFaceNormals()\n\n    this.m.color = new THREE.Color(`hsl(${200 + 100*Math.sin(time*4)},100%, 50%)`);\n  }\n}\nclass Scene extends Component {\n  constructor(props) {\n    super(props);\n\n    this.start = this.start.bind(this);\n    this.stop = this.stop.bind(this);\n    this.animate = this.animate.bind(this);\n  }\n  componentDidMount() {\n    this.scene = new THREE.Scene();\n    this.renderer = new THREE.WebGLRenderer({\n      antialias: true,\n    });\n\n    this.width = this.mount.clientWidth;\n    this.height = this.mount.clientHeight;\n    this.renderer.setClearColor(0xeeeeee, 1);\n    this.renderer.setSize(this.width, this.height);\n    this.renderer.physicallyCorrectLights = true;\n    this.renderer.outputEncoding = THREE.sRGBEncoding;\n    this.mouse = new THREE.Vector2();\n    this.target = new THREE.Vector3(0,0,0);\n    this.raycaster = new THREE.Raycaster();\n\n    this.container = document.getElementById(\"scene\");\n\n    this.mount.appendChild(this.renderer.domElement);\n\n    this.camera = new THREE.PerspectiveCamera(\n      75,\n      this.width / this.height,\n      0.001,\n      1000\n    );\n\n    this.camera.position.set(0, 0, 15);\n\n    this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n\n    this.time = 0;\n    this.setupResize();\n    this.addObjects();\n    this.animate();\n    this.lighting();\n    this.mouseEvents();\n    this.resize();\n    \n  }\n\n  mouseEvents() {\n    var that = this;\n\n    this.touchme = new THREE.Mesh(\n      new THREE.PlaneGeometry(40,40,20,20),\n      new THREE.MeshBasicMaterial({color: 0x000000, wireframe: true})\n    )\n\n    //this.scene.add(this.touchme)\n\n    \n    function onMouseMove( event ) {\n\n      // calculate mouse position in normalized device coordinates\n      // (-1 to +1) for both components\n    \n      that.mouse.x = ( event.clientX / window.innerWidth ) * 2 - 1;\n      that.mouse.y = - ( event.clientY / window.innerHeight ) * 2 + 1;\n\n      that.raycaster.setFromCamera( that.mouse, that.camera );\n\n      // calculate objects intersecting the picking ray\n      const intersects = that.raycaster.intersectObjects( [that.touchme] );\n\n      that.target = intersects[0].point;\n    \n    }\n\n    this.container.addEventListener( 'mousemove', onMouseMove, false );\n    \n  }\n\n  lighting() {\n    var directionalLight = new THREE.DirectionalLight(0xffffff, 1);\n\n    directionalLight.position.set(1, 1, 1);\n    this.scene.add(directionalLight);\n\n    var directionalLight = new THREE.DirectionalLight(0xffffff, 0.5);\n\n    directionalLight.position.set(-1, -1, -1);\n    this.scene.add(directionalLight);\n\n    var light = new THREE.AmbientLight(0x404040);\n    this.scene.add(light);\n  }\n\n  addObjects() {\n    let that = this;\n    this.material = new THREE.ShaderMaterial({\n      extensions: {\n        derivatives: \"#extension GL_OES_standard_derivatives : enable\",\n      },\n      side: THREE.DoubleSide,\n      uniforms: {\n        time: { type: \"f\", value: 0 },\n\n        resolution: { type: \"v4\", value: new THREE.Vector4() },\n        uvRate1: {\n          value: new THREE.Vector2(1, 1),\n        },\n      },\n      vertexShader: vertex,\n      fragmentShader: fragment,\n    });\n\n    this.ribbons = [];\n    for (let i = 0; i < 1; i++) {\n      let ribbon = new Ribbon(this.material);\n      this.scene.add(ribbon.mesh);\n\n      this.ribbons.push(ribbon);\n    }\n\n    //this.geometry = new THREE.PlaneGeometry(1, 1, 1, 1);\n\n    //this.plane = new THREE.Mesh(this.geometry, this.material);\n\n    //this.scene.add(this.plane);\n  }\n\n  setupResize = () => {\n    window.addEventListener(\"resize\", this.resize);\n  };\n\n  resize = () => {\n    this.width = this.container.offsetWidth;\n    this.height = this.container.offsetHeight;\n    this.renderer.setSize(this.width, this.height);\n    this.camera.aspect = this.width / this.height;\n    console.log(\"resize\");\n\n    this.imageAspect = 853 / 1280;\n    /* \n    let a1;\n    let a2;\n\n    if (this.height / this.width > this.imageAspect) {\n      a1 = (this.width / this.height) * this.imageAspect;\n      a2 = 1;\n    } else {\n      a1 = 1;\n      a2 = this.height / this.width / this.imageAspect;\n    }\n\n    this.material.uniforms.resolution.value.x = this.width;\n    this.material.uniforms.resolution.value.y = this.height;\n    this.material.uniforms.resolution.value.z = a1;\n    this.material.uniforms.resolution.value.w = a2;\n\n    const dist = this.camera.position.z;\n    const height = 1;\n    this.camera.fov = 2* (180/Math.PI) * Math.atan(height/(2*dist));\n\n    if (this.width / this.height > 1) {\n      this.plane.scale.x = this.camera.aspect;\n    } else {\n      this.plane.scale.y = 1 / this.camera.aspect;\n    }  */\n\n    this.camera.updateProjectionMatrix();\n    console.log(this.camera);\n  };\n\n  componentWillUnmount() {\n    this.stop();\n    this.mount.removeChild(this.renderer.domElement);\n  }\n\n  start() {\n    if (!this.frameId) {\n      this.frameId = requestAnimationFrame(this.animate);\n    }\n  }\n\n  stop() {\n    cancelAnimationFrame(this.frameId);\n  }\n\n  animate() {\n    this.time += 0.05;\n    this.material.uniforms.time.value = this.time;\n\n    this.frameId = requestAnimationFrame(this.animate);\n\n    this.renderScene();\n\n    this.ribbons.forEach((ribbon) => {\n      ribbon.update(this.time, this.target);\n    });\n  }\n\n  renderScene() {\n    this.renderer.render(this.scene, this.camera);\n  }\n\n  render() {\n    return (\n      <div\n        id=\"scene\"\n        ref={(mount) => {\n          this.mount = mount;\n        }}\n      />\n    );\n  }\n}\n\nexport default Scene;\n","/Users/ishansengupta/Desktop/front-end/ribbons/src/shaders/fragment.js",[],"/Users/ishansengupta/Desktop/front-end/ribbons/src/shaders/vertex.js",[],{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","severity":1,"message":"35","line":17,"column":7,"nodeType":"36","endLine":17,"endColumn":43},{"ruleId":"37","severity":1,"message":"38","line":163,"column":9,"nodeType":"39","messageId":"40","endLine":163,"endColumn":25},{"ruleId":"41","severity":1,"message":"42","line":173,"column":9,"nodeType":"39","messageId":"43","endLine":173,"endColumn":13},"no-native-reassign",["44"],"no-negated-in-lhs",["45"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-redeclare","'directionalLight' is already defined.","Identifier","redeclared","no-unused-vars","'that' is assigned a value but never used.","unusedVar","no-global-assign","no-unsafe-negation"]